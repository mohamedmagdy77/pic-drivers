

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Aug 31 18:12:38 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 2.05
    18                           ; Generated 20/12/2018 GMT
    19                           ; 
    20                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4550 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     _TRISD	set	3989
    52  0000                     _LATD	set	3980
    53  0000                     _LD5	set	31845
    54  0000                     _LD4	set	31844
    55                           
    56                           	psect	smallconst
    57  000800                     __psmallconst:
    58                           	opt callstack 0
    59  000800  00                 	db	0
    60  000801                     STR_1:
    61  000801  6D                 	db	109	;'m'
    62  000802  6F                 	db	111	;'o'
    63  000803  68                 	db	104	;'h'
    64  000804  61                 	db	97	;'a'
    65  000805  6D                 	db	109	;'m'
    66  000806  65                 	db	101	;'e'
    67  000807  64                 	db	100	;'d'
    68  000808  00                 	db	0
    69                           
    70                           ; #config settings
    71  000809  00                 	db	0	; dummy byte at the end
    72  0000                     
    73                           	psect	cinit
    74  000982                     __pcinit:
    75                           	opt callstack 0
    76  000982                     start_initialization:
    77                           	opt callstack 0
    78  000982                     __initialization:
    79                           	opt callstack 0
    80  000982                     end_of_initialization:
    81                           	opt callstack 0
    82  000982                     __end_of__initialization:
    83                           	opt callstack 0
    84  000982  0E00               	movlw	low (__Lsmallconst shr (0+16))
    85  000984  6EF8               	movwf	tblptru,c
    86  000986  0E08               	movlw	high __Lsmallconst
    87  000988  6EF7               	movwf	tblptrh,c
    88  00098A  0100               	movlb	0
    89  00098C  EFB2  F004         	goto	_main	;jump to C main() function
    90                           
    91                           	psect	cstackCOMRAM
    92  000001                     __pcstackCOMRAM:
    93                           	opt callstack 0
    94  000001                     MSdelay@val:
    95                           	opt callstack 0
    96                           
    97                           ; 2 bytes @ 0x0
    98  000001                     	ds	2
    99  000003                     MSdelay@i:
   100                           	opt callstack 0
   101                           
   102                           ; 2 bytes @ 0x2
   103  000003                     	ds	2
   104  000005                     MSdelay@j:
   105                           	opt callstack 0
   106                           
   107                           ; 2 bytes @ 0x4
   108  000005                     	ds	2
   109  000007                     ??_send_cmd:
   110  000007                     ??_send_chr:
   111                           
   112                           ; 1 bytes @ 0x6
   113  000007                     	ds	1
   114  000008                     send_cmd@copy:
   115                           	opt callstack 0
   116  000008                     send_chr@copy:
   117                           	opt callstack 0
   118                           
   119                           ; 1 bytes @ 0x7
   120  000008                     	ds	1
   121  000009                     send_cmd@cmd:
   122                           	opt callstack 0
   123  000009                     send_chr@chr:
   124                           	opt callstack 0
   125                           
   126                           ; 1 bytes @ 0x8
   127  000009                     	ds	1
   128  00000A                     send_string@col:
   129                           	opt callstack 0
   130                           
   131                           ; 1 bytes @ 0x9
   132  00000A                     	ds	1
   133  00000B                     send_string@string:
   134                           	opt callstack 0
   135                           
   136                           ; 2 bytes @ 0xA
   137  00000B                     	ds	2
   138  00000D                     send_string@row:
   139                           	opt callstack 0
   140                           
   141                           ; 1 bytes @ 0xC
   142  00000D                     	ds	1
   143  00000E                     send_string@loc:
   144                           	opt callstack 0
   145                           
   146                           ; 1 bytes @ 0xD
   147  00000E                     	ds	1
   148  00000F                     
   149                           ; 1 bytes @ 0xE
   150 ;;
   151 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   152 ;;
   153 ;; *************** function _main *****************
   154 ;; Defined at:
   155 ;;		line 15 in file "main.c"
   156 ;; Parameters:    Size  Location     Type
   157 ;;		None
   158 ;; Auto vars:     Size  Location     Type
   159 ;;		None
   160 ;; Return value:  Size  Location     Type
   161 ;;                  1    wreg      void 
   162 ;; Registers used:
   163 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   164 ;; Tracked objects:
   165 ;;		On entry : 0/0
   166 ;;		On exit  : 0/0
   167 ;;		Unchanged: 0/0
   168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   169 ;;      Params:         0       0       0       0       0       0       0       0       0
   170 ;;      Locals:         0       0       0       0       0       0       0       0       0
   171 ;;      Temps:          0       0       0       0       0       0       0       0       0
   172 ;;      Totals:         0       0       0       0       0       0       0       0       0
   173 ;;Total ram usage:        0 bytes
   174 ;; Hardware stack levels required when called:    3
   175 ;; This function calls:
   176 ;;		__init_lcd
   177 ;;		_send_chr
   178 ;;		_send_string
   179 ;; This function is called by:
   180 ;;		Startup code after reset
   181 ;; This function uses a non-reentrant model
   182 ;;
   183                           
   184                           	psect	text0
   185  000964                     __ptext0:
   186                           	opt callstack 0
   187  000964                     _main:
   188                           	opt callstack 28
   189                           
   190                           ;main.c: 16:     _init_lcd();
   191                           
   192                           ;incstack = 0
   193  000964  EC7D  F004         	call	__init_lcd	;wreg free
   194                           
   195                           ;main.c: 17:     send_chr('f');
   196  000968  0E66               	movlw	102
   197  00096A  EC2D  F004         	call	_send_chr
   198                           
   199                           ;main.c: 18:     send_string(2,3,"mohamed");
   200  00096E  0E03               	movlw	3
   201  000970  6E0A               	movwf	send_string@col,c
   202  000972  0E01               	movlw	low STR_1
   203  000974  6E0B               	movwf	send_string@string,c
   204  000976  0E08               	movlw	high STR_1
   205  000978  6E0C               	movwf	send_string@string+1,c
   206  00097A  0E02               	movlw	2
   207  00097C  EC05  F004         	call	_send_string
   208  000980                     l48:
   209  000980  D7FF               	goto	l48
   210  000982                     __end_of_main:
   211                           	opt callstack 0
   212                           
   213 ;; *************** function _send_string *****************
   214 ;; Defined at:
   215 ;;		line 65 in file "lcd_45.c"
   216 ;; Parameters:    Size  Location     Type
   217 ;;  row             1    wreg     unsigned char 
   218 ;;  col             1    9[COMRAM] unsigned char 
   219 ;;  string          2   10[COMRAM] PTR unsigned char 
   220 ;;		 -> STR_1(8), 
   221 ;; Auto vars:     Size  Location     Type
   222 ;;  row             1   12[COMRAM] unsigned char 
   223 ;;  loc             1   13[COMRAM] unsigned char 
   224 ;; Return value:  Size  Location     Type
   225 ;;                  1    wreg      void 
   226 ;; Registers used:
   227 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   228 ;; Tracked objects:
   229 ;;		On entry : 0/0
   230 ;;		On exit  : 0/0
   231 ;;		Unchanged: 0/0
   232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   233 ;;      Params:         3       0       0       0       0       0       0       0       0
   234 ;;      Locals:         2       0       0       0       0       0       0       0       0
   235 ;;      Temps:          0       0       0       0       0       0       0       0       0
   236 ;;      Totals:         5       0       0       0       0       0       0       0       0
   237 ;;Total ram usage:        5 bytes
   238 ;; Hardware stack levels used:    1
   239 ;; Hardware stack levels required when called:    2
   240 ;; This function calls:
   241 ;;		_send_chr
   242 ;;		_send_cmd
   243 ;; This function is called by:
   244 ;;		_main
   245 ;; This function uses a non-reentrant model
   246 ;;
   247                           
   248                           	psect	text1
   249  00080A                     __ptext1:
   250                           	opt callstack 0
   251  00080A                     _send_string:
   252                           	opt callstack 28
   253                           
   254                           ;incstack = 0
   255                           ;send_string@row stored from wreg
   256  00080A  6E0D               	movwf	send_string@row,c
   257                           
   258                           ;lcd_45.c: 66:     unsigned char loc;;lcd_45.c: 67:     if(row==1){
   259  00080C  040D               	decf	send_string@row,w,c
   260  00080E  A4D8               	btfss	status,2,c
   261  000810  D008               	goto	l913
   262                           
   263                           ;lcd_45.c: 68:         loc = 0x80 | (col & 0x0F);
   264  000812  500A               	movf	send_string@col,w,c
   265  000814  0B0F               	andlw	15
   266  000816  0980               	iorlw	128
   267  000818  6E0E               	movwf	send_string@loc,c
   268                           
   269                           ;lcd_45.c: 69:         send_cmd(loc);
   270  00081A  500E               	movf	send_string@loc,w,c
   271  00081C  EC55  F004         	call	_send_cmd
   272                           
   273                           ;lcd_45.c: 70:     }
   274  000820  D012               	goto	l921
   275  000822                     l913:
   276                           
   277                           ;lcd_45.c: 72:         loc = 0xc0 | (col & 0x0F);
   278  000822  500A               	movf	send_string@col,w,c
   279  000824  0B0F               	andlw	15
   280  000826  09C0               	iorlw	192
   281  000828  6E0E               	movwf	send_string@loc,c
   282                           
   283                           ;lcd_45.c: 73:         send_cmd(loc);
   284  00082A  500E               	movf	send_string@loc,w,c
   285  00082C  EC55  F004         	call	_send_cmd
   286  000830  D00A               	goto	l921
   287  000832                     l917:
   288                           
   289                           ;lcd_45.c: 76:         send_chr(*string);
   290  000832  C00B  FFF6         	movff	send_string@string,tblptrl
   291  000836  C00C  FFF7         	movff	send_string@string+1,tblptrh
   292  00083A                     	if	0	;tblptru may be non-zero
   293  00083A                     	endif
   294  00083A                     	if	0	;tblptru may be non-zero
   295  00083A                     	endif
   296  00083A  0008               	tblrd		*
   297  00083C  50F5               	movf	tablat,w,c
   298  00083E  EC2D  F004         	call	_send_chr
   299                           
   300                           ;lcd_45.c: 77:         string++;
   301  000842  4A0B               	infsnz	send_string@string,f,c
   302  000844  2A0C               	incf	send_string@string+1,f,c
   303  000846                     l921:
   304                           
   305                           ;lcd_45.c: 75:     while((*string) != '\0'){
   306  000846  C00B  FFF6         	movff	send_string@string,tblptrl
   307  00084A  C00C  FFF7         	movff	send_string@string+1,tblptrh
   308  00084E                     	if	0	;tblptru may be non-zero
   309  00084E                     	endif
   310  00084E                     	if	0	;tblptru may be non-zero
   311  00084E                     	endif
   312  00084E  0008               	tblrd		*
   313  000850  50F5               	movf	tablat,w,c
   314  000852  0900               	iorlw	0
   315  000854  B4D8               	btfsc	status,2,c
   316  000856  0012               	return	
   317  000858  D7EC               	goto	l917
   318  00085A                     __end_of_send_string:
   319                           	opt callstack 0
   320                           
   321 ;; *************** function _send_chr *****************
   322 ;; Defined at:
   323 ;;		line 42 in file "lcd_45.c"
   324 ;; Parameters:    Size  Location     Type
   325 ;;  chr             1    wreg     unsigned char 
   326 ;; Auto vars:     Size  Location     Type
   327 ;;  chr             1    8[COMRAM] unsigned char 
   328 ;;  copy            1    7[COMRAM] unsigned char 
   329 ;; Return value:  Size  Location     Type
   330 ;;                  1    wreg      void 
   331 ;; Registers used:
   332 ;;		wreg, status,2, status,0, cstack
   333 ;; Tracked objects:
   334 ;;		On entry : 0/0
   335 ;;		On exit  : 0/0
   336 ;;		Unchanged: 0/0
   337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   338 ;;      Params:         0       0       0       0       0       0       0       0       0
   339 ;;      Locals:         2       0       0       0       0       0       0       0       0
   340 ;;      Temps:          1       0       0       0       0       0       0       0       0
   341 ;;      Totals:         3       0       0       0       0       0       0       0       0
   342 ;;Total ram usage:        3 bytes
   343 ;; Hardware stack levels used:    1
   344 ;; Hardware stack levels required when called:    1
   345 ;; This function calls:
   346 ;;		_MSdelay
   347 ;; This function is called by:
   348 ;;		_send_string
   349 ;;		_main
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353                           	psect	text2
   354  00085A                     __ptext2:
   355                           	opt callstack 0
   356  00085A                     _send_chr:
   357                           	opt callstack 28
   358                           
   359                           ;incstack = 0
   360                           ;send_chr@chr stored from wreg
   361  00085A  6E09               	movwf	send_chr@chr,c
   362                           
   363                           ;lcd_45.c: 43:     unsigned char copy = chr;
   364  00085C  C009  F008         	movff	send_chr@chr,send_chr@copy
   365                           
   366                           ;lcd_45.c: 44:     LATD = (LATD & 0xF0) | (copy >> 4);
   367  000860  C008  F007         	movff	send_chr@copy,??_send_chr
   368  000864  3A07               	swapf	??_send_chr,f,c
   369  000866  0E0F               	movlw	15
   370  000868  1607               	andwf	??_send_chr,f,c
   371  00086A  508C               	movf	3980,w,c	;volatile
   372  00086C  0BF0               	andlw	240
   373  00086E  1007               	iorwf	??_send_chr,w,c
   374  000870  6E8C               	movwf	3980,c	;volatile
   375                           
   376                           ;lcd_45.c: 45:     LD4 = 1;
   377  000872  888C               	bsf	3980,4,c	;volatile
   378                           
   379                           ;lcd_45.c: 46:     LD5 = 1;
   380  000874  8A8C               	bsf	3980,5,c	;volatile
   381                           
   382                           ;lcd_45.c: 47:     __nop();
   383  000876  F000               	nop	
   384                           
   385                           ;lcd_45.c: 48:     LD5 = 0;
   386  000878  9A8C               	bcf	3980,5,c	;volatile
   387                           
   388                           ;lcd_45.c: 49:     MSdelay(1);
   389  00087A  0E00               	movlw	0
   390  00087C  6E02               	movwf	MSdelay@val+1,c
   391  00087E  0E01               	movlw	1
   392  000880  6E01               	movwf	MSdelay@val,c
   393  000882  EC98  F004         	call	_MSdelay	;wreg free
   394                           
   395                           ;lcd_45.c: 51:     LATD = (LATD & 0xF0) | (chr & 0x0F);
   396  000886  C009  F007         	movff	send_chr@chr,??_send_chr
   397  00088A  0E0F               	movlw	15
   398  00088C  1607               	andwf	??_send_chr,f,c
   399  00088E  508C               	movf	3980,w,c	;volatile
   400  000890  0BF0               	andlw	240
   401  000892  1007               	iorwf	??_send_chr,w,c
   402  000894  6E8C               	movwf	3980,c	;volatile
   403                           
   404                           ;lcd_45.c: 52:     LD5 = 1;
   405  000896  8A8C               	bsf	3980,5,c	;volatile
   406                           
   407                           ;lcd_45.c: 53:     __nop();
   408  000898  F000               	nop	
   409                           
   410                           ;lcd_45.c: 54:     LD5 = 0;
   411  00089A  9A8C               	bcf	3980,5,c	;volatile
   412                           
   413                           ;lcd_45.c: 55:     MSdelay(3);
   414  00089C  0E00               	movlw	0
   415  00089E  6E02               	movwf	MSdelay@val+1,c
   416  0008A0  0E03               	movlw	3
   417  0008A2  6E01               	movwf	MSdelay@val,c
   418  0008A4  EC98  F004         	call	_MSdelay	;wreg free
   419  0008A8  0012               	return		;funcret
   420  0008AA                     __end_of_send_chr:
   421                           	opt callstack 0
   422                           
   423 ;; *************** function __init_lcd *****************
   424 ;; Defined at:
   425 ;;		line 29 in file "lcd_45.c"
   426 ;; Parameters:    Size  Location     Type
   427 ;;		None
   428 ;; Auto vars:     Size  Location     Type
   429 ;;		None
   430 ;; Return value:  Size  Location     Type
   431 ;;                  1    wreg      void 
   432 ;; Registers used:
   433 ;;		wreg, status,2, status,0, cstack
   434 ;; Tracked objects:
   435 ;;		On entry : 0/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   439 ;;      Params:         0       0       0       0       0       0       0       0       0
   440 ;;      Locals:         0       0       0       0       0       0       0       0       0
   441 ;;      Temps:          0       0       0       0       0       0       0       0       0
   442 ;;      Totals:         0       0       0       0       0       0       0       0       0
   443 ;;Total ram usage:        0 bytes
   444 ;; Hardware stack levels used:    1
   445 ;; Hardware stack levels required when called:    2
   446 ;; This function calls:
   447 ;;		_MSdelay
   448 ;;		_send_cmd
   449 ;; This function is called by:
   450 ;;		_main
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           	psect	text3
   455  0008FA                     __ptext3:
   456                           	opt callstack 0
   457  0008FA                     __init_lcd:
   458                           	opt callstack 28
   459                           
   460                           ;lcd_45.c: 30:     TRISD = 0;
   461                           
   462                           ;incstack = 0
   463  0008FA  0E00               	movlw	0
   464  0008FC  6E95               	movwf	3989,c	;volatile
   465                           
   466                           ;lcd_45.c: 31:     MSdelay(15);
   467  0008FE  0E00               	movlw	0
   468  000900  6E02               	movwf	MSdelay@val+1,c
   469  000902  0E0F               	movlw	15
   470  000904  6E01               	movwf	MSdelay@val,c
   471  000906  EC98  F004         	call	_MSdelay	;wreg free
   472                           
   473                           ;lcd_45.c: 32:     send_cmd(0x02);
   474  00090A  0E02               	movlw	2
   475  00090C  EC55  F004         	call	_send_cmd
   476                           
   477                           ;lcd_45.c: 33:     send_cmd(0x28);
   478  000910  0E28               	movlw	40
   479  000912  EC55  F004         	call	_send_cmd
   480                           
   481                           ;lcd_45.c: 34:     send_cmd(0x01);
   482  000916  0E01               	movlw	1
   483  000918  EC55  F004         	call	_send_cmd
   484                           
   485                           ;lcd_45.c: 36:     send_cmd(0x0c);
   486  00091C  0E0C               	movlw	12
   487  00091E  EC55  F004         	call	_send_cmd
   488                           
   489                           ;lcd_45.c: 37:     send_cmd(0x14);
   490  000922  0E14               	movlw	20
   491  000924  EC55  F004         	call	_send_cmd
   492                           
   493                           ;lcd_45.c: 38:     send_cmd(0x06);
   494  000928  0E06               	movlw	6
   495  00092A  EC55  F004         	call	_send_cmd
   496  00092E  0012               	return		;funcret
   497  000930                     __end_of__init_lcd:
   498                           	opt callstack 0
   499                           
   500 ;; *************** function _send_cmd *****************
   501 ;; Defined at:
   502 ;;		line 12 in file "lcd_45.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;  cmd             1    wreg     unsigned char 
   505 ;; Auto vars:     Size  Location     Type
   506 ;;  cmd             1    8[COMRAM] unsigned char 
   507 ;;  copy            1    7[COMRAM] unsigned char 
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		wreg, status,2, status,0, cstack
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   517 ;;      Params:         0       0       0       0       0       0       0       0       0
   518 ;;      Locals:         2       0       0       0       0       0       0       0       0
   519 ;;      Temps:          1       0       0       0       0       0       0       0       0
   520 ;;      Totals:         3       0       0       0       0       0       0       0       0
   521 ;;Total ram usage:        3 bytes
   522 ;; Hardware stack levels used:    1
   523 ;; Hardware stack levels required when called:    1
   524 ;; This function calls:
   525 ;;		_MSdelay
   526 ;; This function is called by:
   527 ;;		__init_lcd
   528 ;;		_send_string
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           	psect	text4
   533  0008AA                     __ptext4:
   534                           	opt callstack 0
   535  0008AA                     _send_cmd:
   536                           	opt callstack 28
   537                           
   538                           ;incstack = 0
   539                           ;send_cmd@cmd stored from wreg
   540  0008AA  6E09               	movwf	send_cmd@cmd,c
   541                           
   542                           ;lcd_45.c: 13:     unsigned char copy = cmd;
   543  0008AC  C009  F008         	movff	send_cmd@cmd,send_cmd@copy
   544                           
   545                           ;lcd_45.c: 14:     LATD = (LATD & 0xF0) | (copy >> 4);
   546  0008B0  C008  F007         	movff	send_cmd@copy,??_send_cmd
   547  0008B4  3A07               	swapf	??_send_cmd,f,c
   548  0008B6  0E0F               	movlw	15
   549  0008B8  1607               	andwf	??_send_cmd,f,c
   550  0008BA  508C               	movf	3980,w,c	;volatile
   551  0008BC  0BF0               	andlw	240
   552  0008BE  1007               	iorwf	??_send_cmd,w,c
   553  0008C0  6E8C               	movwf	3980,c	;volatile
   554                           
   555                           ;lcd_45.c: 15:     LD4 = 0;
   556  0008C2  988C               	bcf	3980,4,c	;volatile
   557                           
   558                           ;lcd_45.c: 16:     LD5 = 1;
   559  0008C4  8A8C               	bsf	3980,5,c	;volatile
   560                           
   561                           ;lcd_45.c: 17:     __nop();
   562  0008C6  F000               	nop	
   563                           
   564                           ;lcd_45.c: 18:     LD5 = 0;
   565  0008C8  9A8C               	bcf	3980,5,c	;volatile
   566                           
   567                           ;lcd_45.c: 19:     MSdelay(1);
   568  0008CA  0E00               	movlw	0
   569  0008CC  6E02               	movwf	MSdelay@val+1,c
   570  0008CE  0E01               	movlw	1
   571  0008D0  6E01               	movwf	MSdelay@val,c
   572  0008D2  EC98  F004         	call	_MSdelay	;wreg free
   573                           
   574                           ;lcd_45.c: 21:     LATD = (LATD & 0xF0) | (cmd & 0x0F);
   575  0008D6  C009  F007         	movff	send_cmd@cmd,??_send_cmd
   576  0008DA  0E0F               	movlw	15
   577  0008DC  1607               	andwf	??_send_cmd,f,c
   578  0008DE  508C               	movf	3980,w,c	;volatile
   579  0008E0  0BF0               	andlw	240
   580  0008E2  1007               	iorwf	??_send_cmd,w,c
   581  0008E4  6E8C               	movwf	3980,c	;volatile
   582                           
   583                           ;lcd_45.c: 22:     LD5 = 1;
   584  0008E6  8A8C               	bsf	3980,5,c	;volatile
   585                           
   586                           ;lcd_45.c: 23:     __nop();
   587  0008E8  F000               	nop	
   588                           
   589                           ;lcd_45.c: 24:     LD5 = 0;
   590  0008EA  9A8C               	bcf	3980,5,c	;volatile
   591                           
   592                           ;lcd_45.c: 25:     MSdelay(3);
   593  0008EC  0E00               	movlw	0
   594  0008EE  6E02               	movwf	MSdelay@val+1,c
   595  0008F0  0E03               	movlw	3
   596  0008F2  6E01               	movwf	MSdelay@val,c
   597  0008F4  EC98  F004         	call	_MSdelay	;wreg free
   598  0008F8  0012               	return		;funcret
   599  0008FA                     __end_of_send_cmd:
   600                           	opt callstack 0
   601                           
   602 ;; *************** function _MSdelay *****************
   603 ;; Defined at:
   604 ;;		line 58 in file "lcd_45.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;  val             2    0[COMRAM] unsigned int 
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  j               2    4[COMRAM] unsigned int 
   609 ;;  i               2    2[COMRAM] unsigned int 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, status,2, status,0
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   619 ;;      Params:         2       0       0       0       0       0       0       0       0
   620 ;;      Locals:         4       0       0       0       0       0       0       0       0
   621 ;;      Temps:          0       0       0       0       0       0       0       0       0
   622 ;;      Totals:         6       0       0       0       0       0       0       0       0
   623 ;;Total ram usage:        6 bytes
   624 ;; Hardware stack levels used:    1
   625 ;; This function calls:
   626 ;;		Nothing
   627 ;; This function is called by:
   628 ;;		_send_cmd
   629 ;;		__init_lcd
   630 ;;		_send_chr
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text5
   635  000930                     __ptext5:
   636                           	opt callstack 0
   637  000930                     _MSdelay:
   638                           	opt callstack 28
   639                           
   640                           ;lcd_45.c: 58: void MSdelay(unsigned int val);lcd_45.c: 59: {;lcd_45.c: 60:  unsigned in
      +                          t i,j;;lcd_45.c: 61:  for(i=0;i<val;i++)
   641                           
   642                           ;incstack = 0
   643  000930  0E00               	movlw	0
   644  000932  6E04               	movwf	MSdelay@i+1,c
   645  000934  0E00               	movlw	0
   646  000936  6E03               	movwf	MSdelay@i,c
   647  000938  D00E               	goto	l841
   648  00093A                     l829:
   649                           
   650                           ;lcd_45.c: 62:      for(j=0;j<165;j++);
   651  00093A  0E00               	movlw	0
   652  00093C  6E06               	movwf	MSdelay@j+1,c
   653  00093E  0E00               	movlw	0
   654  000940  6E05               	movwf	MSdelay@j,c
   655  000942                     l835:
   656  000942  4A05               	infsnz	MSdelay@j,f,c
   657  000944  2A06               	incf	MSdelay@j+1,f,c
   658  000946  5006               	movf	MSdelay@j+1,w,c
   659  000948  E104               	bnz	u50
   660  00094A  0EA5               	movlw	165
   661  00094C  5C05               	subwf	MSdelay@j,w,c
   662  00094E  A0D8               	btfss	status,0,c
   663  000950  D7F8               	goto	l835
   664  000952                     u50:
   665  000952  4A03               	infsnz	MSdelay@i,f,c
   666  000954  2A04               	incf	MSdelay@i+1,f,c
   667  000956                     l841:
   668  000956  5001               	movf	MSdelay@val,w,c
   669  000958  5C03               	subwf	MSdelay@i,w,c
   670  00095A  5002               	movf	MSdelay@val+1,w,c
   671  00095C  5804               	subwfb	MSdelay@i+1,w,c
   672  00095E  B0D8               	btfsc	status,0,c
   673  000960  0012               	return	
   674  000962  D7EB               	goto	l829
   675  000964                     __end_of_MSdelay:
   676                           	opt callstack 0
   677                           
   678                           	psect	rparam
   679  0000                     tosu	equ	0xFFF
   680                           tosh	equ	0xFFE
   681                           tosl	equ	0xFFD
   682                           stkptr	equ	0xFFC
   683                           pclatu	equ	0xFFB
   684                           pclath	equ	0xFFA
   685                           pcl	equ	0xFF9
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           prodh	equ	0xFF4
   691                           prodl	equ	0xFF3
   692                           indf0	equ	0xFEF
   693                           postinc0	equ	0xFEE
   694                           postdec0	equ	0xFED
   695                           preinc0	equ	0xFEC
   696                           plusw0	equ	0xFEB
   697                           fsr0h	equ	0xFEA
   698                           fsr0l	equ	0xFE9
   699                           wreg	equ	0xFE8
   700                           indf1	equ	0xFE7
   701                           postinc1	equ	0xFE6
   702                           postdec1	equ	0xFE5
   703                           preinc1	equ	0xFE4
   704                           plusw1	equ	0xFE3
   705                           fsr1h	equ	0xFE2
   706                           fsr1l	equ	0xFE1
   707                           bsr	equ	0xFE0
   708                           indf2	equ	0xFDF
   709                           postinc2	equ	0xFDE
   710                           postdec2	equ	0xFDD
   711                           preinc2	equ	0xFDC
   712                           plusw2	equ	0xFDB
   713                           fsr2h	equ	0xFDA
   714                           fsr2l	equ	0xFD9
   715                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    send_string@string	PTR unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_send_string
    _send_string->_send_chr
    _send_string->_send_cmd
    _send_chr->_MSdelay
    __init_lcd->_send_cmd
    _send_cmd->_MSdelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2937
                          __init_lcd
                           _send_chr
                        _send_string
 ---------------------------------------------------------------------------------
 (1) _send_string                                          5     2      3    1387
                                              9 COMRAM     5     2      3
                           _send_chr
                           _send_cmd
 ---------------------------------------------------------------------------------
 (2) _send_chr                                             3     3      0     539
                                              6 COMRAM     3     3      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) __init_lcd                                            0     0      0    1011
                            _MSdelay
                           _send_cmd
 ---------------------------------------------------------------------------------
 (2) _send_cmd                                             3     3      0     539
                                              6 COMRAM     3     3      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (3) _MSdelay                                              6     4      2     472
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   __init_lcd
     _MSdelay
     _send_cmd
       _MSdelay
   _send_chr
     _MSdelay
   _send_string
     _send_chr
       _MSdelay
     _send_cmd
       _MSdelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      E       E       1       14.7%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Aug 31 18:12:38 2019

                     l48 0980                       u50 0952              __CFG_BOR$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000  
                    l841 0956                      l921 0846                      l913 0822  
                    l835 0942                      l829 093A                      l917 0832  
                    _LD4 007C64                      _LD5 007C65             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000             __CFG_WDT$OFF 000000                     STR_1 0801  
                   _LATD 000F8C                     _main 0964                     start 0000  
        __end_of_MSdelay 0964            __CFG_IESO$OFF 000000             ___param_bank 000000  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
          __CFG_USBDIV$1 000000                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000           __CFG_MCLRE$OFF 000000          __initialization 0982  
           __end_of_main 0982                   ??_main 000F            __activetblptr 000001  
              ??_MSdelay 0003             ?_send_string 000A           send_string@col 000A  
         send_string@loc 000E           send_string@row 000D           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000         __end_of_send_cmd 08FA         __end_of_send_chr 08AA  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0982  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
     __size_of__init_lcd 0036              send_cmd@cmd 0009              send_chr@chr 0009  
      __end_of__init_lcd 0930                  _MSdelay 0930          __CFG_VREGEN$OFF 000000  
   __size_of_send_string 0050                ?_send_cmd 0001                ?_send_chr 0001  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
                __pcinit 0982                  __ramtop 0800                  __ptext0 0964  
                __ptext1 080A                  __ptext2 085A                  __ptext3 08FA  
                __ptext4 08AA                  __ptext5 0930     end_of_initialization 0982  
             ??_send_cmd 0007               ??_send_chr 0007        send_string@string 000B  
    start_initialization 0982         __CFG_LPT1OSC$OFF 000000                 ?_MSdelay 0001  
              __init_lcd 08FA        __size_of_send_cmd 0050        __size_of_send_chr 0050  
            __smallconst 0800            ??_send_string 000D                 MSdelay@i 0003  
               MSdelay@j 0005               ?__init_lcd 0001         __CFG_WDTPS$32768 000000  
           send_cmd@copy 0008             send_chr@copy 0008         __size_of_MSdelay 0034  
               __Hrparam 0000      __end_of_send_string 085A                 __Lrparam 0000  
           __Lsmallconst 0800    __CFG_FOSC$INTOSCIO_EC 000000            __size_of_main 001E  
            ??__init_lcd 000A                 _send_cmd 08AA                 _send_chr 085A  
             MSdelay@val 0001    __CFG_CPUDIV$OSC1_PLL2 000000              _send_string 080A  
